/*
 * This file is generated by jOOQ.
 */
package com.parser.core.example.entity.tables;


import com.parser.core.example.entity.Keys;
import com.parser.core.example.entity.Public;
import com.parser.core.example.entity.tables.records.ExampleDictRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExampleDict extends TableImpl<ExampleDictRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.example_dict</code>
     */
    public static final ExampleDict EXAMPLE_DICT = new ExampleDict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExampleDictRecord> getRecordType() {
        return ExampleDictRecord.class;
    }

    /**
     * The column <code>public.example_dict.id</code>.
     */
    public final TableField<ExampleDictRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.example_dict.cdt</code>.
     */
    public final TableField<ExampleDictRecord, LocalDateTime> CDT = createField(DSL.name("cdt"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.example_dict.created_by</code>.
     */
    public final TableField<ExampleDictRecord, UUID> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.example_dict.mdt</code>.
     */
    public final TableField<ExampleDictRecord, LocalDateTime> MDT = createField(DSL.name("mdt"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.example_dict.modified_by</code>.
     */
    public final TableField<ExampleDictRecord, UUID> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.example_dict.rdt</code>.
     */
    public final TableField<ExampleDictRecord, LocalDateTime> RDT = createField(DSL.name("rdt"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.example_dict.description</code>.
     */
    public final TableField<ExampleDictRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.example_dict.name</code>.
     */
    public final TableField<ExampleDictRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.example_dict.amount</code>.
     */
    public final TableField<ExampleDictRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(38, 2), this, "");

    /**
     * The column <code>public.example_dict.date</code>.
     */
    public final TableField<ExampleDictRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.example_dict.date_time</code>.
     */
    public final TableField<ExampleDictRecord, LocalDateTime> DATE_TIME = createField(DSL.name("date_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.example_dict.number</code>.
     */
    public final TableField<ExampleDictRecord, Long> NUMBER = createField(DSL.name("number"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.example_dict.text</code>.
     */
    public final TableField<ExampleDictRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.example_dict.time</code>.
     */
    public final TableField<ExampleDictRecord, LocalTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALTIME(6), this, "");

    private ExampleDict(Name alias, Table<ExampleDictRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ExampleDict(Name alias, Table<ExampleDictRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.example_dict</code> table reference
     */
    public ExampleDict(String alias) {
        this(DSL.name(alias), EXAMPLE_DICT);
    }

    /**
     * Create an aliased <code>public.example_dict</code> table reference
     */
    public ExampleDict(Name alias) {
        this(alias, EXAMPLE_DICT);
    }

    /**
     * Create a <code>public.example_dict</code> table reference
     */
    public ExampleDict() {
        this(DSL.name("example_dict"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExampleDictRecord> getPrimaryKey() {
        return Keys.EXAMPLE_DICT_PKEY;
    }

    @Override
    public ExampleDict as(String alias) {
        return new ExampleDict(DSL.name(alias), this);
    }

    @Override
    public ExampleDict as(Name alias) {
        return new ExampleDict(alias, this);
    }

    @Override
    public ExampleDict as(Table<?> alias) {
        return new ExampleDict(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExampleDict rename(String name) {
        return new ExampleDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExampleDict rename(Name name) {
        return new ExampleDict(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExampleDict rename(Table<?> name) {
        return new ExampleDict(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExampleDict where(Condition condition) {
        return new ExampleDict(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExampleDict where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExampleDict where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExampleDict where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExampleDict where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExampleDict where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExampleDict where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExampleDict where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExampleDict whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExampleDict whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
