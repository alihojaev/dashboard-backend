/*
 * This file is generated by jOOQ.
 */
package com.parser.core.example.entity.tables.records;


import com.parser.core.example.entity.tables.TestEntity;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestEntityRecord extends UpdatableRecordImpl<TestEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.test_entity.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.test_entity.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.test_entity.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.test_entity.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestEntityRecord
     */
    public TestEntityRecord() {
        super(TestEntity.TEST_ENTITY);
    }

    /**
     * Create a detached, initialised TestEntityRecord
     */
    public TestEntityRecord(Integer id, String name) {
        super(TestEntity.TEST_ENTITY);

        setId(id);
        setName(name);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TestEntityRecord
     */
    public TestEntityRecord(com.parser.core.example.entity.tables.pojos.TestEntity value) {
        super(TestEntity.TEST_ENTITY);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            resetChangedOnNotNull();
        }
    }
}
